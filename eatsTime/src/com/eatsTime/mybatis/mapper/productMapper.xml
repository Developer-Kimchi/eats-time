<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="product">

	<!-- 페이징 -->
	<!-- 파일, 맴버, 상품, 판매 조인 -->
	<select id="selectAll" resultType="productDTO">
		select s.sale_content, b.* from tbl_sale s join
		(select
		file_name,
		a.*
		from
		tbl_file f
		join (
		select
		p.*,
		member_identification,
		member_name
		from
		tbl_member m
		join tbl_product p on
		m.member_id = p.member_id) a
		on
		f.product_id = a.product_id) b on s.product_id = b.product_id
		<where>
			<choose>
				<when test="category == 'pickUp'.toString()">
					product_category = '0'
				</when>
				<when test="category == 'send'.toString()">
					product_category = '1'
				</when>
			</choose>
			
			<choose>
				<when test="keyword != null">
					and product_name like concat('%', #{keyword}, '%')
				</when>
			</choose>
		</where>

		<choose>
			<when test="sort=='recent'.toString()">
				order by product_id desc
			</when>
			<when test="sort=='lowPrice'.toString()">
				order by product_price asc
			</when>
			<when test="sort=='highPrice'.toString()">
				order by product_price desc
			</when>
		</choose>
		limit #{offset}, #{rowCount}
	</select>



	<!-- 총 상품개수 -->
	<select id="getTotal" resultType="_int">
select count(s.product_id) from tbl_sale s join
		(select
		file_name,
		a.*
		from
		tbl_file f
		join (
		select
		p.*,
		member_identification,
		member_name
		from
		tbl_member m
		join tbl_product p on
		m.member_id = p.member_id) a
		on
		f.product_id = a.product_id) b on s.product_id = b.product_id
		<where>
			<choose>
				<when test="category == 'pickUp'.toString()">
					product_category = '0'
				</when>
				<when test="category == 'send'.toString()">
					product_category = '1'
				</when>
			</choose>
			<choose>
				<when test="keyword != null">
					and product_name like concat('%', #{keyword}, '%')
				</when>
			</choose>
		</where>

	</select>

	<!-- 배송 제품 총 개수 -->
	<select id="getDeliveryTotal" resultType="_int">
	select count(s.product_id) from tbl_sale s join
		(select
		file_name,
		a.*
		from
		tbl_file f
		join (
		select
		p.*,
		member_identification,
		member_name
		from
		tbl_member m
		join tbl_product p on
		m.member_id = p.member_id) a
		on
		f.product_id = a.product_id) b on s.product_id = b.product_id where product_category = '1'
	</select>

	<!-- 배송 제품 페이징 -->
	<select id="selectDeliveryAll" resultType="productDTO">
		select s.sale_content, b.* from tbl_sale s join
		(select
		file_name,
		a.*
		from
		tbl_file f
		join (
		select
		p.*,
		member_identification,
		member_name
		from
		tbl_member m
		join tbl_product p on
		m.member_id = p.member_id) a
		on
		f.product_id = a.product_id and a.product_category = '1') b on s.product_id
		=
		b.product_id
		<choose>
			<when test="sort=='recent'.toString()">
				order by product_id desc
			</when>
			<when test="sort=='lowPrice'.toString()">
				order by product_price asc
			</when>
			<when test="sort=='highPrice'.toString()">
				order by product_price desc
			</when>
		</choose>
		limit #{offset}, #{rowCount}
	</select>


	<!-- 픽업 제품 총 개수 -->
	<select id="getPickUpTotal" resultType="_int">
select count(s.product_id) from tbl_sale s join
		(select
		file_name,
		a.*
		from
		tbl_file f
		join (
		select
		p.*,
		member_identification,
		member_name
		from
		tbl_member m
		join tbl_product p on
		m.member_id = p.member_id) a
		on
		f.product_id = a.product_id) b on s.product_id = b.product_id where product_category = '0'
	</select>

	<!-- 픽업 제품 페이징 -->
	<select id="selectPickUpAll" resultType="productDTO">
		select s.sale_content, b.* from tbl_sale s join
		(select
		file_name,
		a.*
		from
		tbl_file f
		join (
		select
		p.*,
		member_identification,
		member_name
		from
		tbl_member m
		join tbl_product p on
		m.member_id = p.member_id) a
		on
		f.product_id = a.product_id and a.product_category = '0') b on s.product_id
		=
		b.product_id
		<choose>
			<when test="sort=='recent'.toString()">
				order by product_id desc
			</when>
			<when test="sort=='lowPrice'.toString()">
				order by product_price asc
			</when>
			<when test="sort=='highPrice'.toString()">
				order by product_price desc
			</when>
		</choose>
		limit #{offset}, #{rowCount}
	</select>


	<!-- 게시글 상세보기 -->
	<!-- 상세보기안에 판매 게시글 내용 넣기위한 조인 -->
	<select id="selectProductDetail" resultType="productDTO">
		select
		s.sale_content, b.* from tbl_sale s join
		(select
		file_name,
		a.*
		from
		tbl_file f
		join (
		select
		p.*,
		member_identification,
		member_name
		from
		tbl_member m
		join tbl_product p on
		m.member_id = p.member_id) a
		on
		f.product_id = a.product_id) b on s.product_id = b.product_id and
		b.product_id =
		#{productId}
	</select>

	<!-- 결제창에 불러올 회원 + 상품 + 사진 정보 -->
	<!-- 상세보기안에 판매 게시글 내용 넣기위한 조인 -->
	<select id="selectPurchase" resultType="productDTO">
		select *, file_name from
		tbl_file f join tbl_product p where product_id =
		#{productId} ;
	</select>

	<!-- 4월 28일 김인진 부분 -->
	<!-- 상품 등록 -->
	<insert id="insert">
		insert into tbl_product(member_id, product_category,
		product_name, product_price, product_expiration_date, product_stock,
		product_address, product_address_detail)
		values(#{memberId},
		#{productCategory}, #{productName}, #{productPrice},
		#{productExpirationDate}, #{productStock}, #{productAddress},
		#{productAddressDetail})
	</insert>

	<!-- 4월 29일 김인진 부분 -->
	<!-- 구매 내역 -->
	<select id="selectUploadListAll" resultType="productListDTO">
		select p1.product_id,
		p1.product_date, p1.product_name, p1.product_category, p1.product_price,
		f.file_original_name, p1.member_id
		from tbl_product
		p1, tbl_file f
		where p1.product_id = f.product_id and p1.member_id = #{memberId}
	</select>
	
	<!-- 5월 1일 김인진 부분 -->
	<!-- 최근 등록글 불러오기 -->
	<select id="selectCurrentSequence" resultType="long">
		select last_insert_id()
	</select>
	
</mapper>